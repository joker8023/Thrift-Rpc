#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MasterCheckModel(object):
    """
    Attributes:
     - data
     - masters
     - sys_status
    """


    def __init__(self, data=None, masters=None, sys_status=None,):
        self.data = data
        self.masters = masters
        self.sys_status = sys_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = []
                        (_etype9, _size6) = iprot.readListBegin()
                        for _i10 in range(_size6):
                            _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem5.append(_elem11)
                        iprot.readListEnd()
                        self.data.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.masters = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = []
                        (_etype21, _size18) = iprot.readListBegin()
                        for _i22 in range(_size18):
                            _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem17.append(_elem23)
                        iprot.readListEnd()
                        self.masters.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sys_status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MasterCheckModel')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.data))
            for iter24 in self.data:
                oprot.writeListBegin(TType.STRING, len(iter24))
                for iter25 in iter24:
                    oprot.writeString(iter25.encode('utf-8') if sys.version_info[0] == 2 else iter25)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.masters is not None:
            oprot.writeFieldBegin('masters', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.masters))
            for iter26 in self.masters:
                oprot.writeListBegin(TType.STRING, len(iter26))
                for iter27 in iter26:
                    oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sys_status is not None:
            oprot.writeFieldBegin('sys_status', TType.I64, 3)
            oprot.writeI64(self.sys_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RatingsModel(object):
    """
    Attributes:
     - dgRating
     - epsRating
     - rsRating
     - accDis
     - groupRank
     - marketOutlook
     - sys_status
    """


    def __init__(self, dgRating=None, epsRating=None, rsRating=None, accDis=None, groupRank=None, marketOutlook=None, sys_status=None,):
        self.dgRating = dgRating
        self.epsRating = epsRating
        self.rsRating = rsRating
        self.accDis = accDis
        self.groupRank = groupRank
        self.marketOutlook = marketOutlook
        self.sys_status = sys_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.dgRating = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = []
                        (_etype37, _size34) = iprot.readListBegin()
                        for _i38 in range(_size34):
                            _elem39 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem33.append(_elem39)
                        iprot.readListEnd()
                        self.dgRating.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.epsRating = []
                    (_etype43, _size40) = iprot.readListBegin()
                    for _i44 in range(_size40):
                        _elem45 = []
                        (_etype49, _size46) = iprot.readListBegin()
                        for _i50 in range(_size46):
                            _elem51 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem45.append(_elem51)
                        iprot.readListEnd()
                        self.epsRating.append(_elem45)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.rsRating = []
                    (_etype55, _size52) = iprot.readListBegin()
                    for _i56 in range(_size52):
                        _elem57 = []
                        (_etype61, _size58) = iprot.readListBegin()
                        for _i62 in range(_size58):
                            _elem63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem57.append(_elem63)
                        iprot.readListEnd()
                        self.rsRating.append(_elem57)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.accDis = []
                    (_etype67, _size64) = iprot.readListBegin()
                    for _i68 in range(_size64):
                        _elem69 = []
                        (_etype73, _size70) = iprot.readListBegin()
                        for _i74 in range(_size70):
                            _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem69.append(_elem75)
                        iprot.readListEnd()
                        self.accDis.append(_elem69)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.groupRank = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = []
                        (_etype85, _size82) = iprot.readListBegin()
                        for _i86 in range(_size82):
                            _elem87 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem81.append(_elem87)
                        iprot.readListEnd()
                        self.groupRank.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.marketOutlook = []
                    (_etype91, _size88) = iprot.readListBegin()
                    for _i92 in range(_size88):
                        _elem93 = []
                        (_etype97, _size94) = iprot.readListBegin()
                        for _i98 in range(_size94):
                            _elem99 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem93.append(_elem99)
                        iprot.readListEnd()
                        self.marketOutlook.append(_elem93)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.sys_status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RatingsModel')
        if self.dgRating is not None:
            oprot.writeFieldBegin('dgRating', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.dgRating))
            for iter100 in self.dgRating:
                oprot.writeListBegin(TType.STRING, len(iter100))
                for iter101 in iter100:
                    oprot.writeString(iter101.encode('utf-8') if sys.version_info[0] == 2 else iter101)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.epsRating is not None:
            oprot.writeFieldBegin('epsRating', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.epsRating))
            for iter102 in self.epsRating:
                oprot.writeListBegin(TType.STRING, len(iter102))
                for iter103 in iter102:
                    oprot.writeString(iter103.encode('utf-8') if sys.version_info[0] == 2 else iter103)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rsRating is not None:
            oprot.writeFieldBegin('rsRating', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.rsRating))
            for iter104 in self.rsRating:
                oprot.writeListBegin(TType.STRING, len(iter104))
                for iter105 in iter104:
                    oprot.writeString(iter105.encode('utf-8') if sys.version_info[0] == 2 else iter105)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.accDis is not None:
            oprot.writeFieldBegin('accDis', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.accDis))
            for iter106 in self.accDis:
                oprot.writeListBegin(TType.STRING, len(iter106))
                for iter107 in iter106:
                    oprot.writeString(iter107.encode('utf-8') if sys.version_info[0] == 2 else iter107)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupRank is not None:
            oprot.writeFieldBegin('groupRank', TType.LIST, 5)
            oprot.writeListBegin(TType.LIST, len(self.groupRank))
            for iter108 in self.groupRank:
                oprot.writeListBegin(TType.STRING, len(iter108))
                for iter109 in iter108:
                    oprot.writeString(iter109.encode('utf-8') if sys.version_info[0] == 2 else iter109)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.marketOutlook is not None:
            oprot.writeFieldBegin('marketOutlook', TType.LIST, 6)
            oprot.writeListBegin(TType.LIST, len(self.marketOutlook))
            for iter110 in self.marketOutlook:
                oprot.writeListBegin(TType.STRING, len(iter110))
                for iter111 in iter110:
                    oprot.writeString(iter111.encode('utf-8') if sys.version_info[0] == 2 else iter111)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sys_status is not None:
            oprot.writeFieldBegin('sys_status', TType.I64, 7)
            oprot.writeI64(self.sys_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Top33Model(object):
    """
    Attributes:
     - description
     - data
     - recentAdditions
     - recentRemovals
     - sys_status
    """


    def __init__(self, description=None, data=None, recentAdditions=None, recentRemovals=None, sys_status=None,):
        self.description = description
        self.data = data
        self.recentAdditions = recentAdditions
        self.recentRemovals = recentRemovals
        self.sys_status = sys_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = []
                        (_etype121, _size118) = iprot.readListBegin()
                        for _i122 in range(_size118):
                            _elem123 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem117.append(_elem123)
                        iprot.readListEnd()
                        self.data.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.recentAdditions = []
                    (_etype127, _size124) = iprot.readListBegin()
                    for _i128 in range(_size124):
                        _elem129 = []
                        (_etype133, _size130) = iprot.readListBegin()
                        for _i134 in range(_size130):
                            _elem135 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem129.append(_elem135)
                        iprot.readListEnd()
                        self.recentAdditions.append(_elem129)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.recentRemovals = []
                    (_etype139, _size136) = iprot.readListBegin()
                    for _i140 in range(_size136):
                        _elem141 = []
                        (_etype145, _size142) = iprot.readListBegin()
                        for _i146 in range(_size142):
                            _elem147 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem141.append(_elem147)
                        iprot.readListEnd()
                        self.recentRemovals.append(_elem141)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sys_status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Top33Model')
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 1)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.data))
            for iter148 in self.data:
                oprot.writeListBegin(TType.STRING, len(iter148))
                for iter149 in iter148:
                    oprot.writeString(iter149.encode('utf-8') if sys.version_info[0] == 2 else iter149)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentAdditions is not None:
            oprot.writeFieldBegin('recentAdditions', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.recentAdditions))
            for iter150 in self.recentAdditions:
                oprot.writeListBegin(TType.STRING, len(iter150))
                for iter151 in iter150:
                    oprot.writeString(iter151.encode('utf-8') if sys.version_info[0] == 2 else iter151)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentRemovals is not None:
            oprot.writeFieldBegin('recentRemovals', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.recentRemovals))
            for iter152 in self.recentRemovals:
                oprot.writeListBegin(TType.STRING, len(iter152))
                for iter153 in iter152:
                    oprot.writeString(iter153.encode('utf-8') if sys.version_info[0] == 2 else iter153)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sys_status is not None:
            oprot.writeFieldBegin('sys_status', TType.I64, 5)
            oprot.writeI64(self.sys_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StockListModel(object):
    """
    Attributes:
     - description
     - data
     - sys_status
    """


    def __init__(self, description=None, data=None, sys_status=None,):
        self.description = description
        self.data = data
        self.sys_status = sys_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.data = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = []
                        (_etype163, _size160) = iprot.readListBegin()
                        for _i164 in range(_size160):
                            _elem165 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem159.append(_elem165)
                        iprot.readListEnd()
                        self.data.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sys_status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StockListModel')
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 1)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.data))
            for iter166 in self.data:
                oprot.writeListBegin(TType.STRING, len(iter166))
                for iter167 in iter166:
                    oprot.writeString(iter167.encode('utf-8') if sys.version_info[0] == 2 else iter167)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sys_status is not None:
            oprot.writeFieldBegin('sys_status', TType.I64, 3)
            oprot.writeI64(self.sys_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MasterCheckModel)
MasterCheckModel.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'data', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
    (2, TType.LIST, 'masters', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.I64, 'sys_status', None, None, ),  # 3
)
all_structs.append(RatingsModel)
RatingsModel.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'dgRating', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 1
    (2, TType.LIST, 'epsRating', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.LIST, 'rsRating', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 3
    (4, TType.LIST, 'accDis', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.LIST, 'groupRank', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 5
    (6, TType.LIST, 'marketOutlook', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 6
    (7, TType.I64, 'sys_status', None, None, ),  # 7
)
all_structs.append(Top33Model)
Top33Model.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'description', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'data', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.LIST, 'recentAdditions', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 3
    (4, TType.LIST, 'recentRemovals', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.I64, 'sys_status', None, None, ),  # 5
)
all_structs.append(StockListModel)
StockListModel.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'description', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'data', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    (3, TType.I64, 'sys_status', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
