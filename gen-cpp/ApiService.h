/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApiService_H
#define ApiService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "won_types.h"

namespace won {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApiServiceIf {
 public:
  virtual ~ApiServiceIf() {}
  virtual void master_checklist(MasterCheckModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol) = 0;
  virtual void ratings(RatingsModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol) = 0;
  virtual void top33(Top33Model& _return, const std::string& device_uuid, const std::string& access_token) = 0;
  virtual void near_pivot(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) = 0;
  virtual void volume_up(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) = 0;
  virtual void dividend_stocks(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) = 0;
  virtual int64_t registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token) = 0;
};

class ApiServiceIfFactory {
 public:
  typedef ApiServiceIf Handler;

  virtual ~ApiServiceIfFactory() {}

  virtual ApiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApiServiceIf* /* handler */) = 0;
};

class ApiServiceIfSingletonFactory : virtual public ApiServiceIfFactory {
 public:
  ApiServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ApiServiceIf>& iface) : iface_(iface) {}
  virtual ~ApiServiceIfSingletonFactory() {}

  virtual ApiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ApiServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiServiceIf> iface_;
};

class ApiServiceNull : virtual public ApiServiceIf {
 public:
  virtual ~ApiServiceNull() {}
  void master_checklist(MasterCheckModel& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */, const std::string& /* mic */, const std::string& /* symbol */) {
    return;
  }
  void ratings(RatingsModel& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */, const std::string& /* mic */, const std::string& /* symbol */) {
    return;
  }
  void top33(Top33Model& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */) {
    return;
  }
  void near_pivot(StockListModel& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */) {
    return;
  }
  void volume_up(StockListModel& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */) {
    return;
  }
  void dividend_stocks(StockListModel& /* _return */, const std::string& /* device_uuid */, const std::string& /* access_token */) {
    return;
  }
  int64_t registered(const std::string& /* won_key */, const std::string& /* device_uuid */, const std::string& /* timestamp */, const std::string& /* access_token */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _ApiService_master_checklist_args__isset {
  _ApiService_master_checklist_args__isset() : device_uuid(false), access_token(false), mic(false), symbol(false) {}
  bool device_uuid :1;
  bool access_token :1;
  bool mic :1;
  bool symbol :1;
} _ApiService_master_checklist_args__isset;

class ApiService_master_checklist_args {
 public:

  ApiService_master_checklist_args(const ApiService_master_checklist_args&);
  ApiService_master_checklist_args& operator=(const ApiService_master_checklist_args&);
  ApiService_master_checklist_args() : device_uuid(), access_token(), mic(), symbol() {
  }

  virtual ~ApiService_master_checklist_args() throw();
  std::string device_uuid;
  std::string access_token;
  std::string mic;
  std::string symbol;

  _ApiService_master_checklist_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  void __set_mic(const std::string& val);

  void __set_symbol(const std::string& val);

  bool operator == (const ApiService_master_checklist_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    if (!(mic == rhs.mic))
      return false;
    if (!(symbol == rhs.symbol))
      return false;
    return true;
  }
  bool operator != (const ApiService_master_checklist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_master_checklist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_master_checklist_pargs {
 public:


  virtual ~ApiService_master_checklist_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;
  const std::string* mic;
  const std::string* symbol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_master_checklist_result__isset {
  _ApiService_master_checklist_result__isset() : success(false) {}
  bool success :1;
} _ApiService_master_checklist_result__isset;

class ApiService_master_checklist_result {
 public:

  ApiService_master_checklist_result(const ApiService_master_checklist_result&);
  ApiService_master_checklist_result& operator=(const ApiService_master_checklist_result&);
  ApiService_master_checklist_result() {
  }

  virtual ~ApiService_master_checklist_result() throw();
  MasterCheckModel success;

  _ApiService_master_checklist_result__isset __isset;

  void __set_success(const MasterCheckModel& val);

  bool operator == (const ApiService_master_checklist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_master_checklist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_master_checklist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_master_checklist_presult__isset {
  _ApiService_master_checklist_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_master_checklist_presult__isset;

class ApiService_master_checklist_presult {
 public:


  virtual ~ApiService_master_checklist_presult() throw();
  MasterCheckModel* success;

  _ApiService_master_checklist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_ratings_args__isset {
  _ApiService_ratings_args__isset() : device_uuid(false), access_token(false), mic(false), symbol(false) {}
  bool device_uuid :1;
  bool access_token :1;
  bool mic :1;
  bool symbol :1;
} _ApiService_ratings_args__isset;

class ApiService_ratings_args {
 public:

  ApiService_ratings_args(const ApiService_ratings_args&);
  ApiService_ratings_args& operator=(const ApiService_ratings_args&);
  ApiService_ratings_args() : device_uuid(), access_token(), mic(), symbol() {
  }

  virtual ~ApiService_ratings_args() throw();
  std::string device_uuid;
  std::string access_token;
  std::string mic;
  std::string symbol;

  _ApiService_ratings_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  void __set_mic(const std::string& val);

  void __set_symbol(const std::string& val);

  bool operator == (const ApiService_ratings_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    if (!(mic == rhs.mic))
      return false;
    if (!(symbol == rhs.symbol))
      return false;
    return true;
  }
  bool operator != (const ApiService_ratings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_ratings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_ratings_pargs {
 public:


  virtual ~ApiService_ratings_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;
  const std::string* mic;
  const std::string* symbol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_ratings_result__isset {
  _ApiService_ratings_result__isset() : success(false) {}
  bool success :1;
} _ApiService_ratings_result__isset;

class ApiService_ratings_result {
 public:

  ApiService_ratings_result(const ApiService_ratings_result&);
  ApiService_ratings_result& operator=(const ApiService_ratings_result&);
  ApiService_ratings_result() {
  }

  virtual ~ApiService_ratings_result() throw();
  RatingsModel success;

  _ApiService_ratings_result__isset __isset;

  void __set_success(const RatingsModel& val);

  bool operator == (const ApiService_ratings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_ratings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_ratings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_ratings_presult__isset {
  _ApiService_ratings_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_ratings_presult__isset;

class ApiService_ratings_presult {
 public:


  virtual ~ApiService_ratings_presult() throw();
  RatingsModel* success;

  _ApiService_ratings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_top33_args__isset {
  _ApiService_top33_args__isset() : device_uuid(false), access_token(false) {}
  bool device_uuid :1;
  bool access_token :1;
} _ApiService_top33_args__isset;

class ApiService_top33_args {
 public:

  ApiService_top33_args(const ApiService_top33_args&);
  ApiService_top33_args& operator=(const ApiService_top33_args&);
  ApiService_top33_args() : device_uuid(), access_token() {
  }

  virtual ~ApiService_top33_args() throw();
  std::string device_uuid;
  std::string access_token;

  _ApiService_top33_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  bool operator == (const ApiService_top33_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    return true;
  }
  bool operator != (const ApiService_top33_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_top33_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_top33_pargs {
 public:


  virtual ~ApiService_top33_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_top33_result__isset {
  _ApiService_top33_result__isset() : success(false) {}
  bool success :1;
} _ApiService_top33_result__isset;

class ApiService_top33_result {
 public:

  ApiService_top33_result(const ApiService_top33_result&);
  ApiService_top33_result& operator=(const ApiService_top33_result&);
  ApiService_top33_result() {
  }

  virtual ~ApiService_top33_result() throw();
  Top33Model success;

  _ApiService_top33_result__isset __isset;

  void __set_success(const Top33Model& val);

  bool operator == (const ApiService_top33_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_top33_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_top33_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_top33_presult__isset {
  _ApiService_top33_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_top33_presult__isset;

class ApiService_top33_presult {
 public:


  virtual ~ApiService_top33_presult() throw();
  Top33Model* success;

  _ApiService_top33_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_near_pivot_args__isset {
  _ApiService_near_pivot_args__isset() : device_uuid(false), access_token(false) {}
  bool device_uuid :1;
  bool access_token :1;
} _ApiService_near_pivot_args__isset;

class ApiService_near_pivot_args {
 public:

  ApiService_near_pivot_args(const ApiService_near_pivot_args&);
  ApiService_near_pivot_args& operator=(const ApiService_near_pivot_args&);
  ApiService_near_pivot_args() : device_uuid(), access_token() {
  }

  virtual ~ApiService_near_pivot_args() throw();
  std::string device_uuid;
  std::string access_token;

  _ApiService_near_pivot_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  bool operator == (const ApiService_near_pivot_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    return true;
  }
  bool operator != (const ApiService_near_pivot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_near_pivot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_near_pivot_pargs {
 public:


  virtual ~ApiService_near_pivot_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_near_pivot_result__isset {
  _ApiService_near_pivot_result__isset() : success(false) {}
  bool success :1;
} _ApiService_near_pivot_result__isset;

class ApiService_near_pivot_result {
 public:

  ApiService_near_pivot_result(const ApiService_near_pivot_result&);
  ApiService_near_pivot_result& operator=(const ApiService_near_pivot_result&);
  ApiService_near_pivot_result() {
  }

  virtual ~ApiService_near_pivot_result() throw();
  StockListModel success;

  _ApiService_near_pivot_result__isset __isset;

  void __set_success(const StockListModel& val);

  bool operator == (const ApiService_near_pivot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_near_pivot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_near_pivot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_near_pivot_presult__isset {
  _ApiService_near_pivot_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_near_pivot_presult__isset;

class ApiService_near_pivot_presult {
 public:


  virtual ~ApiService_near_pivot_presult() throw();
  StockListModel* success;

  _ApiService_near_pivot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_volume_up_args__isset {
  _ApiService_volume_up_args__isset() : device_uuid(false), access_token(false) {}
  bool device_uuid :1;
  bool access_token :1;
} _ApiService_volume_up_args__isset;

class ApiService_volume_up_args {
 public:

  ApiService_volume_up_args(const ApiService_volume_up_args&);
  ApiService_volume_up_args& operator=(const ApiService_volume_up_args&);
  ApiService_volume_up_args() : device_uuid(), access_token() {
  }

  virtual ~ApiService_volume_up_args() throw();
  std::string device_uuid;
  std::string access_token;

  _ApiService_volume_up_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  bool operator == (const ApiService_volume_up_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    return true;
  }
  bool operator != (const ApiService_volume_up_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_volume_up_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_volume_up_pargs {
 public:


  virtual ~ApiService_volume_up_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_volume_up_result__isset {
  _ApiService_volume_up_result__isset() : success(false) {}
  bool success :1;
} _ApiService_volume_up_result__isset;

class ApiService_volume_up_result {
 public:

  ApiService_volume_up_result(const ApiService_volume_up_result&);
  ApiService_volume_up_result& operator=(const ApiService_volume_up_result&);
  ApiService_volume_up_result() {
  }

  virtual ~ApiService_volume_up_result() throw();
  StockListModel success;

  _ApiService_volume_up_result__isset __isset;

  void __set_success(const StockListModel& val);

  bool operator == (const ApiService_volume_up_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_volume_up_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_volume_up_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_volume_up_presult__isset {
  _ApiService_volume_up_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_volume_up_presult__isset;

class ApiService_volume_up_presult {
 public:


  virtual ~ApiService_volume_up_presult() throw();
  StockListModel* success;

  _ApiService_volume_up_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_dividend_stocks_args__isset {
  _ApiService_dividend_stocks_args__isset() : device_uuid(false), access_token(false) {}
  bool device_uuid :1;
  bool access_token :1;
} _ApiService_dividend_stocks_args__isset;

class ApiService_dividend_stocks_args {
 public:

  ApiService_dividend_stocks_args(const ApiService_dividend_stocks_args&);
  ApiService_dividend_stocks_args& operator=(const ApiService_dividend_stocks_args&);
  ApiService_dividend_stocks_args() : device_uuid(), access_token() {
  }

  virtual ~ApiService_dividend_stocks_args() throw();
  std::string device_uuid;
  std::string access_token;

  _ApiService_dividend_stocks_args__isset __isset;

  void __set_device_uuid(const std::string& val);

  void __set_access_token(const std::string& val);

  bool operator == (const ApiService_dividend_stocks_args & rhs) const
  {
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    return true;
  }
  bool operator != (const ApiService_dividend_stocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_dividend_stocks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_dividend_stocks_pargs {
 public:


  virtual ~ApiService_dividend_stocks_pargs() throw();
  const std::string* device_uuid;
  const std::string* access_token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_dividend_stocks_result__isset {
  _ApiService_dividend_stocks_result__isset() : success(false) {}
  bool success :1;
} _ApiService_dividend_stocks_result__isset;

class ApiService_dividend_stocks_result {
 public:

  ApiService_dividend_stocks_result(const ApiService_dividend_stocks_result&);
  ApiService_dividend_stocks_result& operator=(const ApiService_dividend_stocks_result&);
  ApiService_dividend_stocks_result() {
  }

  virtual ~ApiService_dividend_stocks_result() throw();
  StockListModel success;

  _ApiService_dividend_stocks_result__isset __isset;

  void __set_success(const StockListModel& val);

  bool operator == (const ApiService_dividend_stocks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_dividend_stocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_dividend_stocks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_dividend_stocks_presult__isset {
  _ApiService_dividend_stocks_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_dividend_stocks_presult__isset;

class ApiService_dividend_stocks_presult {
 public:


  virtual ~ApiService_dividend_stocks_presult() throw();
  StockListModel* success;

  _ApiService_dividend_stocks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiService_registered_args__isset {
  _ApiService_registered_args__isset() : won_key(false), device_uuid(false), timestamp(false), access_token(false) {}
  bool won_key :1;
  bool device_uuid :1;
  bool timestamp :1;
  bool access_token :1;
} _ApiService_registered_args__isset;

class ApiService_registered_args {
 public:

  ApiService_registered_args(const ApiService_registered_args&);
  ApiService_registered_args& operator=(const ApiService_registered_args&);
  ApiService_registered_args() : won_key(), device_uuid(), timestamp(), access_token() {
  }

  virtual ~ApiService_registered_args() throw();
  std::string won_key;
  std::string device_uuid;
  std::string timestamp;
  std::string access_token;

  _ApiService_registered_args__isset __isset;

  void __set_won_key(const std::string& val);

  void __set_device_uuid(const std::string& val);

  void __set_timestamp(const std::string& val);

  void __set_access_token(const std::string& val);

  bool operator == (const ApiService_registered_args & rhs) const
  {
    if (!(won_key == rhs.won_key))
      return false;
    if (!(device_uuid == rhs.device_uuid))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(access_token == rhs.access_token))
      return false;
    return true;
  }
  bool operator != (const ApiService_registered_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_registered_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiService_registered_pargs {
 public:


  virtual ~ApiService_registered_pargs() throw();
  const std::string* won_key;
  const std::string* device_uuid;
  const std::string* timestamp;
  const std::string* access_token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_registered_result__isset {
  _ApiService_registered_result__isset() : success(false) {}
  bool success :1;
} _ApiService_registered_result__isset;

class ApiService_registered_result {
 public:

  ApiService_registered_result(const ApiService_registered_result&);
  ApiService_registered_result& operator=(const ApiService_registered_result&);
  ApiService_registered_result() : success(0) {
  }

  virtual ~ApiService_registered_result() throw();
  int64_t success;

  _ApiService_registered_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const ApiService_registered_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApiService_registered_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiService_registered_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiService_registered_presult__isset {
  _ApiService_registered_presult__isset() : success(false) {}
  bool success :1;
} _ApiService_registered_presult__isset;

class ApiService_registered_presult {
 public:


  virtual ~ApiService_registered_presult() throw();
  int64_t* success;

  _ApiService_registered_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApiServiceClient : virtual public ApiServiceIf {
 public:
  ApiServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void master_checklist(MasterCheckModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void send_master_checklist(const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void recv_master_checklist(MasterCheckModel& _return);
  void ratings(RatingsModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void send_ratings(const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void recv_ratings(RatingsModel& _return);
  void top33(Top33Model& _return, const std::string& device_uuid, const std::string& access_token);
  void send_top33(const std::string& device_uuid, const std::string& access_token);
  void recv_top33(Top33Model& _return);
  void near_pivot(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  void send_near_pivot(const std::string& device_uuid, const std::string& access_token);
  void recv_near_pivot(StockListModel& _return);
  void volume_up(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  void send_volume_up(const std::string& device_uuid, const std::string& access_token);
  void recv_volume_up(StockListModel& _return);
  void dividend_stocks(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  void send_dividend_stocks(const std::string& device_uuid, const std::string& access_token);
  void recv_dividend_stocks(StockListModel& _return);
  int64_t registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token);
  void send_registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token);
  int64_t recv_registered();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApiServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApiServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_master_checklist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ratings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_top33(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_near_pivot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_volume_up(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dividend_stocks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registered(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApiServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ApiServiceIf> iface) :
    iface_(iface) {
    processMap_["master_checklist"] = &ApiServiceProcessor::process_master_checklist;
    processMap_["ratings"] = &ApiServiceProcessor::process_ratings;
    processMap_["top33"] = &ApiServiceProcessor::process_top33;
    processMap_["near_pivot"] = &ApiServiceProcessor::process_near_pivot;
    processMap_["volume_up"] = &ApiServiceProcessor::process_volume_up;
    processMap_["dividend_stocks"] = &ApiServiceProcessor::process_dividend_stocks;
    processMap_["registered"] = &ApiServiceProcessor::process_registered;
  }

  virtual ~ApiServiceProcessor() {}
};

class ApiServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApiServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ApiServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ApiServiceIfFactory > handlerFactory_;
};

class ApiServiceMultiface : virtual public ApiServiceIf {
 public:
  ApiServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ApiServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApiServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ApiServiceIf> > ifaces_;
  ApiServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ApiServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void master_checklist(MasterCheckModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->master_checklist(_return, device_uuid, access_token, mic, symbol);
    }
    ifaces_[i]->master_checklist(_return, device_uuid, access_token, mic, symbol);
    return;
  }

  void ratings(RatingsModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ratings(_return, device_uuid, access_token, mic, symbol);
    }
    ifaces_[i]->ratings(_return, device_uuid, access_token, mic, symbol);
    return;
  }

  void top33(Top33Model& _return, const std::string& device_uuid, const std::string& access_token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->top33(_return, device_uuid, access_token);
    }
    ifaces_[i]->top33(_return, device_uuid, access_token);
    return;
  }

  void near_pivot(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->near_pivot(_return, device_uuid, access_token);
    }
    ifaces_[i]->near_pivot(_return, device_uuid, access_token);
    return;
  }

  void volume_up(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->volume_up(_return, device_uuid, access_token);
    }
    ifaces_[i]->volume_up(_return, device_uuid, access_token);
    return;
  }

  void dividend_stocks(StockListModel& _return, const std::string& device_uuid, const std::string& access_token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dividend_stocks(_return, device_uuid, access_token);
    }
    ifaces_[i]->dividend_stocks(_return, device_uuid, access_token);
    return;
  }

  int64_t registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registered(won_key, device_uuid, timestamp, access_token);
    }
    return ifaces_[i]->registered(won_key, device_uuid, timestamp, access_token);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApiServiceConcurrentClient : virtual public ApiServiceIf {
 public:
  ApiServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void master_checklist(MasterCheckModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  int32_t send_master_checklist(const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void recv_master_checklist(MasterCheckModel& _return, const int32_t seqid);
  void ratings(RatingsModel& _return, const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  int32_t send_ratings(const std::string& device_uuid, const std::string& access_token, const std::string& mic, const std::string& symbol);
  void recv_ratings(RatingsModel& _return, const int32_t seqid);
  void top33(Top33Model& _return, const std::string& device_uuid, const std::string& access_token);
  int32_t send_top33(const std::string& device_uuid, const std::string& access_token);
  void recv_top33(Top33Model& _return, const int32_t seqid);
  void near_pivot(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  int32_t send_near_pivot(const std::string& device_uuid, const std::string& access_token);
  void recv_near_pivot(StockListModel& _return, const int32_t seqid);
  void volume_up(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  int32_t send_volume_up(const std::string& device_uuid, const std::string& access_token);
  void recv_volume_up(StockListModel& _return, const int32_t seqid);
  void dividend_stocks(StockListModel& _return, const std::string& device_uuid, const std::string& access_token);
  int32_t send_dividend_stocks(const std::string& device_uuid, const std::string& access_token);
  void recv_dividend_stocks(StockListModel& _return, const int32_t seqid);
  int64_t registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token);
  int32_t send_registered(const std::string& won_key, const std::string& device_uuid, const std::string& timestamp, const std::string& access_token);
  int64_t recv_registered(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
