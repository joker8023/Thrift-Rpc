/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef won_TYPES_H
#define won_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace won {

class MasterCheckModel;

class RatingsModel;

class Top33Model;

class StockListModel;

typedef struct _MasterCheckModel__isset {
  _MasterCheckModel__isset() : data(false), masters(false), sys_status(false) {}
  bool data :1;
  bool masters :1;
  bool sys_status :1;
} _MasterCheckModel__isset;

class MasterCheckModel : public virtual ::apache::thrift::TBase {
 public:

  MasterCheckModel(const MasterCheckModel&);
  MasterCheckModel& operator=(const MasterCheckModel&);
  MasterCheckModel() : sys_status(0) {
  }

  virtual ~MasterCheckModel() throw();
  std::vector<std::vector<std::string> >  data;
  std::vector<std::vector<std::string> >  masters;
  int64_t sys_status;

  _MasterCheckModel__isset __isset;

  void __set_data(const std::vector<std::vector<std::string> > & val);

  void __set_masters(const std::vector<std::vector<std::string> > & val);

  void __set_sys_status(const int64_t val);

  bool operator == (const MasterCheckModel & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(masters == rhs.masters))
      return false;
    if (!(sys_status == rhs.sys_status))
      return false;
    return true;
  }
  bool operator != (const MasterCheckModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterCheckModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MasterCheckModel &a, MasterCheckModel &b);

std::ostream& operator<<(std::ostream& out, const MasterCheckModel& obj);

typedef struct _RatingsModel__isset {
  _RatingsModel__isset() : dgRating(false), epsRating(false), rsRating(false), accDis(false), groupRank(false), marketOutlook(false), sys_status(false) {}
  bool dgRating :1;
  bool epsRating :1;
  bool rsRating :1;
  bool accDis :1;
  bool groupRank :1;
  bool marketOutlook :1;
  bool sys_status :1;
} _RatingsModel__isset;

class RatingsModel : public virtual ::apache::thrift::TBase {
 public:

  RatingsModel(const RatingsModel&);
  RatingsModel& operator=(const RatingsModel&);
  RatingsModel() : sys_status(0) {
  }

  virtual ~RatingsModel() throw();
  std::vector<std::vector<std::string> >  dgRating;
  std::vector<std::vector<std::string> >  epsRating;
  std::vector<std::vector<std::string> >  rsRating;
  std::vector<std::vector<std::string> >  accDis;
  std::vector<std::vector<std::string> >  groupRank;
  std::vector<std::vector<std::string> >  marketOutlook;
  int64_t sys_status;

  _RatingsModel__isset __isset;

  void __set_dgRating(const std::vector<std::vector<std::string> > & val);

  void __set_epsRating(const std::vector<std::vector<std::string> > & val);

  void __set_rsRating(const std::vector<std::vector<std::string> > & val);

  void __set_accDis(const std::vector<std::vector<std::string> > & val);

  void __set_groupRank(const std::vector<std::vector<std::string> > & val);

  void __set_marketOutlook(const std::vector<std::vector<std::string> > & val);

  void __set_sys_status(const int64_t val);

  bool operator == (const RatingsModel & rhs) const
  {
    if (!(dgRating == rhs.dgRating))
      return false;
    if (!(epsRating == rhs.epsRating))
      return false;
    if (!(rsRating == rhs.rsRating))
      return false;
    if (!(accDis == rhs.accDis))
      return false;
    if (!(groupRank == rhs.groupRank))
      return false;
    if (!(marketOutlook == rhs.marketOutlook))
      return false;
    if (!(sys_status == rhs.sys_status))
      return false;
    return true;
  }
  bool operator != (const RatingsModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RatingsModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RatingsModel &a, RatingsModel &b);

std::ostream& operator<<(std::ostream& out, const RatingsModel& obj);

typedef struct _Top33Model__isset {
  _Top33Model__isset() : description(false), data(false), recentAdditions(false), recentRemovals(false), sys_status(false) {}
  bool description :1;
  bool data :1;
  bool recentAdditions :1;
  bool recentRemovals :1;
  bool sys_status :1;
} _Top33Model__isset;

class Top33Model : public virtual ::apache::thrift::TBase {
 public:

  Top33Model(const Top33Model&);
  Top33Model& operator=(const Top33Model&);
  Top33Model() : description(), sys_status(0) {
  }

  virtual ~Top33Model() throw();
  std::string description;
  std::vector<std::vector<std::string> >  data;
  std::vector<std::vector<std::string> >  recentAdditions;
  std::vector<std::vector<std::string> >  recentRemovals;
  int64_t sys_status;

  _Top33Model__isset __isset;

  void __set_description(const std::string& val);

  void __set_data(const std::vector<std::vector<std::string> > & val);

  void __set_recentAdditions(const std::vector<std::vector<std::string> > & val);

  void __set_recentRemovals(const std::vector<std::vector<std::string> > & val);

  void __set_sys_status(const int64_t val);

  bool operator == (const Top33Model & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(recentAdditions == rhs.recentAdditions))
      return false;
    if (!(recentRemovals == rhs.recentRemovals))
      return false;
    if (!(sys_status == rhs.sys_status))
      return false;
    return true;
  }
  bool operator != (const Top33Model &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Top33Model & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Top33Model &a, Top33Model &b);

std::ostream& operator<<(std::ostream& out, const Top33Model& obj);

typedef struct _StockListModel__isset {
  _StockListModel__isset() : description(false), data(false), sys_status(false) {}
  bool description :1;
  bool data :1;
  bool sys_status :1;
} _StockListModel__isset;

class StockListModel : public virtual ::apache::thrift::TBase {
 public:

  StockListModel(const StockListModel&);
  StockListModel& operator=(const StockListModel&);
  StockListModel() : description(), sys_status(0) {
  }

  virtual ~StockListModel() throw();
  std::string description;
  std::vector<std::vector<std::string> >  data;
  int64_t sys_status;

  _StockListModel__isset __isset;

  void __set_description(const std::string& val);

  void __set_data(const std::vector<std::vector<std::string> > & val);

  void __set_sys_status(const int64_t val);

  bool operator == (const StockListModel & rhs) const
  {
    if (!(description == rhs.description))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(sys_status == rhs.sys_status))
      return false;
    return true;
  }
  bool operator != (const StockListModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StockListModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StockListModel &a, StockListModel &b);

std::ostream& operator<<(std::ostream& out, const StockListModel& obj);

} // namespace

#endif
