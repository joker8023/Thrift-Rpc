/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package won;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-27")
public class StockListModel implements org.apache.thrift.TBase<StockListModel, StockListModel._Fields>, java.io.Serializable, Cloneable, Comparable<StockListModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockListModel");

  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SYS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_status", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StockListModelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StockListModelTupleSchemeFactory();

  public java.lang.String description; // required
  public java.util.List<java.util.List<java.lang.String>> data; // required
  public long sys_status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESCRIPTION((short)1, "description"),
    DATA((short)2, "data"),
    SYS_STATUS((short)3, "sys_status");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESCRIPTION
          return DESCRIPTION;
        case 2: // DATA
          return DATA;
        case 3: // SYS_STATUS
          return SYS_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYS_STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.SYS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("sys_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockListModel.class, metaDataMap);
  }

  public StockListModel() {
  }

  public StockListModel(
    java.lang.String description,
    java.util.List<java.util.List<java.lang.String>> data,
    long sys_status)
  {
    this();
    this.description = description;
    this.data = data;
    this.sys_status = sys_status;
    setSys_statusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockListModel(StockListModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetData()) {
      java.util.List<java.util.List<java.lang.String>> __this__data = new java.util.ArrayList<java.util.List<java.lang.String>>(other.data.size());
      for (java.util.List<java.lang.String> other_element : other.data) {
        java.util.List<java.lang.String> __this__data_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__data.add(__this__data_copy);
      }
      this.data = __this__data;
    }
    this.sys_status = other.sys_status;
  }

  public StockListModel deepCopy() {
    return new StockListModel(this);
  }

  @Override
  public void clear() {
    this.description = null;
    this.data = null;
    setSys_statusIsSet(false);
    this.sys_status = 0;
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public StockListModel setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<java.util.List<java.lang.String>> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(java.util.List<java.lang.String> elem) {
    if (this.data == null) {
      this.data = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.data.add(elem);
  }

  public java.util.List<java.util.List<java.lang.String>> getData() {
    return this.data;
  }

  public StockListModel setData(java.util.List<java.util.List<java.lang.String>> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public long getSys_status() {
    return this.sys_status;
  }

  public StockListModel setSys_status(long sys_status) {
    this.sys_status = sys_status;
    setSys_statusIsSet(true);
    return this;
  }

  public void unsetSys_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYS_STATUS_ISSET_ID);
  }

  /** Returns true if field sys_status is set (has been assigned a value) and false otherwise */
  public boolean isSetSys_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYS_STATUS_ISSET_ID);
  }

  public void setSys_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYS_STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case SYS_STATUS:
      if (value == null) {
        unsetSys_status();
      } else {
        setSys_status((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DESCRIPTION:
      return getDescription();

    case DATA:
      return getData();

    case SYS_STATUS:
      return getSys_status();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DESCRIPTION:
      return isSetDescription();
    case DATA:
      return isSetData();
    case SYS_STATUS:
      return isSetSys_status();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StockListModel)
      return this.equals((StockListModel)that);
    return false;
  }

  public boolean equals(StockListModel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_sys_status = true;
    boolean that_present_sys_status = true;
    if (this_present_sys_status || that_present_sys_status) {
      if (!(this_present_sys_status && that_present_sys_status))
        return false;
      if (this.sys_status != that.sys_status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sys_status);

    return hashCode;
  }

  @Override
  public int compareTo(StockListModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSys_status()).compareTo(other.isSetSys_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSys_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_status, other.sys_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StockListModel(");
    boolean first = true;

    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sys_status:");
    sb.append(this.sys_status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StockListModelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StockListModelStandardScheme getScheme() {
      return new StockListModelStandardScheme();
    }
  }

  private static class StockListModelStandardScheme extends org.apache.thrift.scheme.StandardScheme<StockListModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockListModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.data = new java.util.ArrayList<java.util.List<java.lang.String>>(_list176.size);
                java.util.List<java.lang.String> _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  {
                    org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                    _elem177 = new java.util.ArrayList<java.lang.String>(_list179.size);
                    java.lang.String _elem180;
                    for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                    {
                      _elem180 = iprot.readString();
                      _elem177.add(_elem180);
                    }
                    iprot.readListEnd();
                  }
                  struct.data.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sys_status = iprot.readI64();
              struct.setSys_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockListModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.data.size()));
          for (java.util.List<java.lang.String> _iter182 : struct.data)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter182.size()));
              for (java.lang.String _iter183 : _iter182)
              {
                oprot.writeString(_iter183);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYS_STATUS_FIELD_DESC);
      oprot.writeI64(struct.sys_status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockListModelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StockListModelTupleScheme getScheme() {
      return new StockListModelTupleScheme();
    }
  }

  private static class StockListModelTupleScheme extends org.apache.thrift.scheme.TupleScheme<StockListModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockListModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetSys_status()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (java.util.List<java.lang.String> _iter184 : struct.data)
          {
            {
              oprot.writeI32(_iter184.size());
              for (java.lang.String _iter185 : _iter184)
              {
                oprot.writeString(_iter185);
              }
            }
          }
        }
      }
      if (struct.isSetSys_status()) {
        oprot.writeI64(struct.sys_status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockListModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.data = new java.util.ArrayList<java.util.List<java.lang.String>>(_list186.size);
          java.util.List<java.lang.String> _elem187;
          for (int _i188 = 0; _i188 < _list186.size; ++_i188)
          {
            {
              org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem187 = new java.util.ArrayList<java.lang.String>(_list189.size);
              java.lang.String _elem190;
              for (int _i191 = 0; _i191 < _list189.size; ++_i191)
              {
                _elem190 = iprot.readString();
                _elem187.add(_elem190);
              }
            }
            struct.data.add(_elem187);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sys_status = iprot.readI64();
        struct.setSys_statusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

