/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package won;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-27")
public class ApiService {

  public interface Iface {

    public MasterCheckModel master_checklist(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException;

    public RatingsModel ratings(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException;

    public Top33Model top33(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException;

    public StockListModel near_pivot(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException;

    public StockListModel volume_up(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException;

    public StockListModel dividend_stocks(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException;

    public long registered(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void master_checklist(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel> resultHandler) throws org.apache.thrift.TException;

    public void ratings(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<RatingsModel> resultHandler) throws org.apache.thrift.TException;

    public void top33(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<Top33Model> resultHandler) throws org.apache.thrift.TException;

    public void near_pivot(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException;

    public void volume_up(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException;

    public void dividend_stocks(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException;

    public void registered(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MasterCheckModel master_checklist(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException
    {
      send_master_checklist(device_uuid, access_token, mic, symbol);
      return recv_master_checklist();
    }

    public void send_master_checklist(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException
    {
      master_checklist_args args = new master_checklist_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      args.setMic(mic);
      args.setSymbol(symbol);
      sendBase("master_checklist", args);
    }

    public MasterCheckModel recv_master_checklist() throws org.apache.thrift.TException
    {
      master_checklist_result result = new master_checklist_result();
      receiveBase(result, "master_checklist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "master_checklist failed: unknown result");
    }

    public RatingsModel ratings(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException
    {
      send_ratings(device_uuid, access_token, mic, symbol);
      return recv_ratings();
    }

    public void send_ratings(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol) throws org.apache.thrift.TException
    {
      ratings_args args = new ratings_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      args.setMic(mic);
      args.setSymbol(symbol);
      sendBase("ratings", args);
    }

    public RatingsModel recv_ratings() throws org.apache.thrift.TException
    {
      ratings_result result = new ratings_result();
      receiveBase(result, "ratings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ratings failed: unknown result");
    }

    public Top33Model top33(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      send_top33(device_uuid, access_token);
      return recv_top33();
    }

    public void send_top33(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      top33_args args = new top33_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      sendBase("top33", args);
    }

    public Top33Model recv_top33() throws org.apache.thrift.TException
    {
      top33_result result = new top33_result();
      receiveBase(result, "top33");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "top33 failed: unknown result");
    }

    public StockListModel near_pivot(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      send_near_pivot(device_uuid, access_token);
      return recv_near_pivot();
    }

    public void send_near_pivot(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      near_pivot_args args = new near_pivot_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      sendBase("near_pivot", args);
    }

    public StockListModel recv_near_pivot() throws org.apache.thrift.TException
    {
      near_pivot_result result = new near_pivot_result();
      receiveBase(result, "near_pivot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "near_pivot failed: unknown result");
    }

    public StockListModel volume_up(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      send_volume_up(device_uuid, access_token);
      return recv_volume_up();
    }

    public void send_volume_up(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      volume_up_args args = new volume_up_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      sendBase("volume_up", args);
    }

    public StockListModel recv_volume_up() throws org.apache.thrift.TException
    {
      volume_up_result result = new volume_up_result();
      receiveBase(result, "volume_up");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "volume_up failed: unknown result");
    }

    public StockListModel dividend_stocks(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      send_dividend_stocks(device_uuid, access_token);
      return recv_dividend_stocks();
    }

    public void send_dividend_stocks(java.lang.String device_uuid, java.lang.String access_token) throws org.apache.thrift.TException
    {
      dividend_stocks_args args = new dividend_stocks_args();
      args.setDevice_uuid(device_uuid);
      args.setAccess_token(access_token);
      sendBase("dividend_stocks", args);
    }

    public StockListModel recv_dividend_stocks() throws org.apache.thrift.TException
    {
      dividend_stocks_result result = new dividend_stocks_result();
      receiveBase(result, "dividend_stocks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dividend_stocks failed: unknown result");
    }

    public long registered(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token) throws org.apache.thrift.TException
    {
      send_registered(won_key, device_uuid, timestamp, access_token);
      return recv_registered();
    }

    public void send_registered(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token) throws org.apache.thrift.TException
    {
      registered_args args = new registered_args();
      args.setWon_key(won_key);
      args.setDevice_uuid(device_uuid);
      args.setTimestamp(timestamp);
      args.setAccess_token(access_token);
      sendBase("registered", args);
    }

    public long recv_registered() throws org.apache.thrift.TException
    {
      registered_result result = new registered_result();
      receiveBase(result, "registered");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registered failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void master_checklist(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      master_checklist_call method_call = new master_checklist_call(device_uuid, access_token, mic, symbol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class master_checklist_call extends org.apache.thrift.async.TAsyncMethodCall<MasterCheckModel> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      private java.lang.String mic;
      private java.lang.String symbol;
      public master_checklist_call(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
        this.mic = mic;
        this.symbol = symbol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("master_checklist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        master_checklist_args args = new master_checklist_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.setMic(mic);
        args.setSymbol(symbol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MasterCheckModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_master_checklist();
      }
    }

    public void ratings(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<RatingsModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ratings_call method_call = new ratings_call(device_uuid, access_token, mic, symbol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ratings_call extends org.apache.thrift.async.TAsyncMethodCall<RatingsModel> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      private java.lang.String mic;
      private java.lang.String symbol;
      public ratings_call(java.lang.String device_uuid, java.lang.String access_token, java.lang.String mic, java.lang.String symbol, org.apache.thrift.async.AsyncMethodCallback<RatingsModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
        this.mic = mic;
        this.symbol = symbol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ratings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ratings_args args = new ratings_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.setMic(mic);
        args.setSymbol(symbol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RatingsModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ratings();
      }
    }

    public void top33(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<Top33Model> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      top33_call method_call = new top33_call(device_uuid, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class top33_call extends org.apache.thrift.async.TAsyncMethodCall<Top33Model> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      public top33_call(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<Top33Model> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("top33", org.apache.thrift.protocol.TMessageType.CALL, 0));
        top33_args args = new top33_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Top33Model getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_top33();
      }
    }

    public void near_pivot(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      near_pivot_call method_call = new near_pivot_call(device_uuid, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class near_pivot_call extends org.apache.thrift.async.TAsyncMethodCall<StockListModel> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      public near_pivot_call(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("near_pivot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        near_pivot_args args = new near_pivot_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockListModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_near_pivot();
      }
    }

    public void volume_up(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      volume_up_call method_call = new volume_up_call(device_uuid, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class volume_up_call extends org.apache.thrift.async.TAsyncMethodCall<StockListModel> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      public volume_up_call(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("volume_up", org.apache.thrift.protocol.TMessageType.CALL, 0));
        volume_up_args args = new volume_up_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockListModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_volume_up();
      }
    }

    public void dividend_stocks(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dividend_stocks_call method_call = new dividend_stocks_call(device_uuid, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dividend_stocks_call extends org.apache.thrift.async.TAsyncMethodCall<StockListModel> {
      private java.lang.String device_uuid;
      private java.lang.String access_token;
      public dividend_stocks_call(java.lang.String device_uuid, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_uuid = device_uuid;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dividend_stocks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dividend_stocks_args args = new dividend_stocks_args();
        args.setDevice_uuid(device_uuid);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockListModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dividend_stocks();
      }
    }

    public void registered(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registered_call method_call = new registered_call(won_key, device_uuid, timestamp, access_token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registered_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String won_key;
      private java.lang.String device_uuid;
      private java.lang.String timestamp;
      private java.lang.String access_token;
      public registered_call(java.lang.String won_key, java.lang.String device_uuid, java.lang.String timestamp, java.lang.String access_token, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.won_key = won_key;
        this.device_uuid = device_uuid;
        this.timestamp = timestamp;
        this.access_token = access_token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registered_args args = new registered_args();
        args.setWon_key(won_key);
        args.setDevice_uuid(device_uuid);
        args.setTimestamp(timestamp);
        args.setAccess_token(access_token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registered();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("master_checklist", new master_checklist());
      processMap.put("ratings", new ratings());
      processMap.put("top33", new top33());
      processMap.put("near_pivot", new near_pivot());
      processMap.put("volume_up", new volume_up());
      processMap.put("dividend_stocks", new dividend_stocks());
      processMap.put("registered", new registered());
      return processMap;
    }

    public static class master_checklist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, master_checklist_args> {
      public master_checklist() {
        super("master_checklist");
      }

      public master_checklist_args getEmptyArgsInstance() {
        return new master_checklist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public master_checklist_result getResult(I iface, master_checklist_args args) throws org.apache.thrift.TException {
        master_checklist_result result = new master_checklist_result();
        result.success = iface.master_checklist(args.device_uuid, args.access_token, args.mic, args.symbol);
        return result;
      }
    }

    public static class ratings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ratings_args> {
      public ratings() {
        super("ratings");
      }

      public ratings_args getEmptyArgsInstance() {
        return new ratings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ratings_result getResult(I iface, ratings_args args) throws org.apache.thrift.TException {
        ratings_result result = new ratings_result();
        result.success = iface.ratings(args.device_uuid, args.access_token, args.mic, args.symbol);
        return result;
      }
    }

    public static class top33<I extends Iface> extends org.apache.thrift.ProcessFunction<I, top33_args> {
      public top33() {
        super("top33");
      }

      public top33_args getEmptyArgsInstance() {
        return new top33_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public top33_result getResult(I iface, top33_args args) throws org.apache.thrift.TException {
        top33_result result = new top33_result();
        result.success = iface.top33(args.device_uuid, args.access_token);
        return result;
      }
    }

    public static class near_pivot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, near_pivot_args> {
      public near_pivot() {
        super("near_pivot");
      }

      public near_pivot_args getEmptyArgsInstance() {
        return new near_pivot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public near_pivot_result getResult(I iface, near_pivot_args args) throws org.apache.thrift.TException {
        near_pivot_result result = new near_pivot_result();
        result.success = iface.near_pivot(args.device_uuid, args.access_token);
        return result;
      }
    }

    public static class volume_up<I extends Iface> extends org.apache.thrift.ProcessFunction<I, volume_up_args> {
      public volume_up() {
        super("volume_up");
      }

      public volume_up_args getEmptyArgsInstance() {
        return new volume_up_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public volume_up_result getResult(I iface, volume_up_args args) throws org.apache.thrift.TException {
        volume_up_result result = new volume_up_result();
        result.success = iface.volume_up(args.device_uuid, args.access_token);
        return result;
      }
    }

    public static class dividend_stocks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dividend_stocks_args> {
      public dividend_stocks() {
        super("dividend_stocks");
      }

      public dividend_stocks_args getEmptyArgsInstance() {
        return new dividend_stocks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dividend_stocks_result getResult(I iface, dividend_stocks_args args) throws org.apache.thrift.TException {
        dividend_stocks_result result = new dividend_stocks_result();
        result.success = iface.dividend_stocks(args.device_uuid, args.access_token);
        return result;
      }
    }

    public static class registered<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registered_args> {
      public registered() {
        super("registered");
      }

      public registered_args getEmptyArgsInstance() {
        return new registered_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registered_result getResult(I iface, registered_args args) throws org.apache.thrift.TException {
        registered_result result = new registered_result();
        result.success = iface.registered(args.won_key, args.device_uuid, args.timestamp, args.access_token);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("master_checklist", new master_checklist());
      processMap.put("ratings", new ratings());
      processMap.put("top33", new top33());
      processMap.put("near_pivot", new near_pivot());
      processMap.put("volume_up", new volume_up());
      processMap.put("dividend_stocks", new dividend_stocks());
      processMap.put("registered", new registered());
      return processMap;
    }

    public static class master_checklist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, master_checklist_args, MasterCheckModel> {
      public master_checklist() {
        super("master_checklist");
      }

      public master_checklist_args getEmptyArgsInstance() {
        return new master_checklist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel>() { 
          public void onComplete(MasterCheckModel o) {
            master_checklist_result result = new master_checklist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            master_checklist_result result = new master_checklist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, master_checklist_args args, org.apache.thrift.async.AsyncMethodCallback<MasterCheckModel> resultHandler) throws org.apache.thrift.TException {
        iface.master_checklist(args.device_uuid, args.access_token, args.mic, args.symbol,resultHandler);
      }
    }

    public static class ratings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ratings_args, RatingsModel> {
      public ratings() {
        super("ratings");
      }

      public ratings_args getEmptyArgsInstance() {
        return new ratings_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RatingsModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RatingsModel>() { 
          public void onComplete(RatingsModel o) {
            ratings_result result = new ratings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ratings_result result = new ratings_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ratings_args args, org.apache.thrift.async.AsyncMethodCallback<RatingsModel> resultHandler) throws org.apache.thrift.TException {
        iface.ratings(args.device_uuid, args.access_token, args.mic, args.symbol,resultHandler);
      }
    }

    public static class top33<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, top33_args, Top33Model> {
      public top33() {
        super("top33");
      }

      public top33_args getEmptyArgsInstance() {
        return new top33_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Top33Model> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Top33Model>() { 
          public void onComplete(Top33Model o) {
            top33_result result = new top33_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            top33_result result = new top33_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, top33_args args, org.apache.thrift.async.AsyncMethodCallback<Top33Model> resultHandler) throws org.apache.thrift.TException {
        iface.top33(args.device_uuid, args.access_token,resultHandler);
      }
    }

    public static class near_pivot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, near_pivot_args, StockListModel> {
      public near_pivot() {
        super("near_pivot");
      }

      public near_pivot_args getEmptyArgsInstance() {
        return new near_pivot_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StockListModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StockListModel>() { 
          public void onComplete(StockListModel o) {
            near_pivot_result result = new near_pivot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            near_pivot_result result = new near_pivot_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, near_pivot_args args, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
        iface.near_pivot(args.device_uuid, args.access_token,resultHandler);
      }
    }

    public static class volume_up<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, volume_up_args, StockListModel> {
      public volume_up() {
        super("volume_up");
      }

      public volume_up_args getEmptyArgsInstance() {
        return new volume_up_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StockListModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StockListModel>() { 
          public void onComplete(StockListModel o) {
            volume_up_result result = new volume_up_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            volume_up_result result = new volume_up_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, volume_up_args args, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
        iface.volume_up(args.device_uuid, args.access_token,resultHandler);
      }
    }

    public static class dividend_stocks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dividend_stocks_args, StockListModel> {
      public dividend_stocks() {
        super("dividend_stocks");
      }

      public dividend_stocks_args getEmptyArgsInstance() {
        return new dividend_stocks_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StockListModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StockListModel>() { 
          public void onComplete(StockListModel o) {
            dividend_stocks_result result = new dividend_stocks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dividend_stocks_result result = new dividend_stocks_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dividend_stocks_args args, org.apache.thrift.async.AsyncMethodCallback<StockListModel> resultHandler) throws org.apache.thrift.TException {
        iface.dividend_stocks(args.device_uuid, args.access_token,resultHandler);
      }
    }

    public static class registered<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registered_args, java.lang.Long> {
      public registered() {
        super("registered");
      }

      public registered_args getEmptyArgsInstance() {
        return new registered_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            registered_result result = new registered_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registered_result result = new registered_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registered_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.registered(args.won_key, args.device_uuid, args.timestamp, args.access_token,resultHandler);
      }
    }

  }

  public static class master_checklist_args implements org.apache.thrift.TBase<master_checklist_args, master_checklist_args._Fields>, java.io.Serializable, Cloneable, Comparable<master_checklist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("master_checklist_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("mic", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new master_checklist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new master_checklist_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required
    public java.lang.String mic; // required
    public java.lang.String symbol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token"),
      MIC((short)3, "mic"),
      SYMBOL((short)4, "symbol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // MIC
            return MIC;
          case 4: // SYMBOL
            return SYMBOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIC, new org.apache.thrift.meta_data.FieldMetaData("mic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(master_checklist_args.class, metaDataMap);
    }

    public master_checklist_args() {
    }

    public master_checklist_args(
      java.lang.String device_uuid,
      java.lang.String access_token,
      java.lang.String mic,
      java.lang.String symbol)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
      this.mic = mic;
      this.symbol = symbol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public master_checklist_args(master_checklist_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
      if (other.isSetMic()) {
        this.mic = other.mic;
      }
      if (other.isSetSymbol()) {
        this.symbol = other.symbol;
      }
    }

    public master_checklist_args deepCopy() {
      return new master_checklist_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
      this.mic = null;
      this.symbol = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public master_checklist_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public master_checklist_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public java.lang.String getMic() {
      return this.mic;
    }

    public master_checklist_args setMic(java.lang.String mic) {
      this.mic = mic;
      return this;
    }

    public void unsetMic() {
      this.mic = null;
    }

    /** Returns true if field mic is set (has been assigned a value) and false otherwise */
    public boolean isSetMic() {
      return this.mic != null;
    }

    public void setMicIsSet(boolean value) {
      if (!value) {
        this.mic = null;
      }
    }

    public java.lang.String getSymbol() {
      return this.symbol;
    }

    public master_checklist_args setSymbol(java.lang.String symbol) {
      this.symbol = symbol;
      return this;
    }

    public void unsetSymbol() {
      this.symbol = null;
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return this.symbol != null;
    }

    public void setSymbolIsSet(boolean value) {
      if (!value) {
        this.symbol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      case MIC:
        if (value == null) {
          unsetMic();
        } else {
          setMic((java.lang.String)value);
        }
        break;

      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      case MIC:
        return getMic();

      case SYMBOL:
        return getSymbol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      case MIC:
        return isSetMic();
      case SYMBOL:
        return isSetSymbol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof master_checklist_args)
        return this.equals((master_checklist_args)that);
      return false;
    }

    public boolean equals(master_checklist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      boolean this_present_mic = true && this.isSetMic();
      boolean that_present_mic = true && that.isSetMic();
      if (this_present_mic || that_present_mic) {
        if (!(this_present_mic && that_present_mic))
          return false;
        if (!this.mic.equals(that.mic))
          return false;
      }

      boolean this_present_symbol = true && this.isSetSymbol();
      boolean that_present_symbol = true && that.isSetSymbol();
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (!this.symbol.equals(that.symbol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      hashCode = hashCode * 8191 + ((isSetMic()) ? 131071 : 524287);
      if (isSetMic())
        hashCode = hashCode * 8191 + mic.hashCode();

      hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
      if (isSetSymbol())
        hashCode = hashCode * 8191 + symbol.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(master_checklist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMic()).compareTo(other.isSetMic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mic, other.mic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("master_checklist_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mic:");
      if (this.mic == null) {
        sb.append("null");
      } else {
        sb.append(this.mic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class master_checklist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public master_checklist_argsStandardScheme getScheme() {
        return new master_checklist_argsStandardScheme();
      }
    }

    private static class master_checklist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<master_checklist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, master_checklist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mic = iprot.readString();
                struct.setMicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.symbol = iprot.readString();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, master_checklist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        if (struct.mic != null) {
          oprot.writeFieldBegin(MIC_FIELD_DESC);
          oprot.writeString(struct.mic);
          oprot.writeFieldEnd();
        }
        if (struct.symbol != null) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class master_checklist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public master_checklist_argsTupleScheme getScheme() {
        return new master_checklist_argsTupleScheme();
      }
    }

    private static class master_checklist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<master_checklist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, master_checklist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        if (struct.isSetMic()) {
          optionals.set(2);
        }
        if (struct.isSetSymbol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
        if (struct.isSetMic()) {
          oprot.writeString(struct.mic);
        }
        if (struct.isSetSymbol()) {
          oprot.writeString(struct.symbol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, master_checklist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mic = iprot.readString();
          struct.setMicIsSet(true);
        }
        if (incoming.get(3)) {
          struct.symbol = iprot.readString();
          struct.setSymbolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class master_checklist_result implements org.apache.thrift.TBase<master_checklist_result, master_checklist_result._Fields>, java.io.Serializable, Cloneable, Comparable<master_checklist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("master_checklist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new master_checklist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new master_checklist_resultTupleSchemeFactory();

    public MasterCheckModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MasterCheckModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(master_checklist_result.class, metaDataMap);
    }

    public master_checklist_result() {
    }

    public master_checklist_result(
      MasterCheckModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public master_checklist_result(master_checklist_result other) {
      if (other.isSetSuccess()) {
        this.success = new MasterCheckModel(other.success);
      }
    }

    public master_checklist_result deepCopy() {
      return new master_checklist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MasterCheckModel getSuccess() {
      return this.success;
    }

    public master_checklist_result setSuccess(MasterCheckModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MasterCheckModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof master_checklist_result)
        return this.equals((master_checklist_result)that);
      return false;
    }

    public boolean equals(master_checklist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(master_checklist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("master_checklist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class master_checklist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public master_checklist_resultStandardScheme getScheme() {
        return new master_checklist_resultStandardScheme();
      }
    }

    private static class master_checklist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<master_checklist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, master_checklist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MasterCheckModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, master_checklist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class master_checklist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public master_checklist_resultTupleScheme getScheme() {
        return new master_checklist_resultTupleScheme();
      }
    }

    private static class master_checklist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<master_checklist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, master_checklist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, master_checklist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MasterCheckModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ratings_args implements org.apache.thrift.TBase<ratings_args, ratings_args._Fields>, java.io.Serializable, Cloneable, Comparable<ratings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ratings_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("mic", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ratings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ratings_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required
    public java.lang.String mic; // required
    public java.lang.String symbol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token"),
      MIC((short)3, "mic"),
      SYMBOL((short)4, "symbol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // MIC
            return MIC;
          case 4: // SYMBOL
            return SYMBOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIC, new org.apache.thrift.meta_data.FieldMetaData("mic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ratings_args.class, metaDataMap);
    }

    public ratings_args() {
    }

    public ratings_args(
      java.lang.String device_uuid,
      java.lang.String access_token,
      java.lang.String mic,
      java.lang.String symbol)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
      this.mic = mic;
      this.symbol = symbol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ratings_args(ratings_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
      if (other.isSetMic()) {
        this.mic = other.mic;
      }
      if (other.isSetSymbol()) {
        this.symbol = other.symbol;
      }
    }

    public ratings_args deepCopy() {
      return new ratings_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
      this.mic = null;
      this.symbol = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public ratings_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public ratings_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public java.lang.String getMic() {
      return this.mic;
    }

    public ratings_args setMic(java.lang.String mic) {
      this.mic = mic;
      return this;
    }

    public void unsetMic() {
      this.mic = null;
    }

    /** Returns true if field mic is set (has been assigned a value) and false otherwise */
    public boolean isSetMic() {
      return this.mic != null;
    }

    public void setMicIsSet(boolean value) {
      if (!value) {
        this.mic = null;
      }
    }

    public java.lang.String getSymbol() {
      return this.symbol;
    }

    public ratings_args setSymbol(java.lang.String symbol) {
      this.symbol = symbol;
      return this;
    }

    public void unsetSymbol() {
      this.symbol = null;
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return this.symbol != null;
    }

    public void setSymbolIsSet(boolean value) {
      if (!value) {
        this.symbol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      case MIC:
        if (value == null) {
          unsetMic();
        } else {
          setMic((java.lang.String)value);
        }
        break;

      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      case MIC:
        return getMic();

      case SYMBOL:
        return getSymbol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      case MIC:
        return isSetMic();
      case SYMBOL:
        return isSetSymbol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ratings_args)
        return this.equals((ratings_args)that);
      return false;
    }

    public boolean equals(ratings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      boolean this_present_mic = true && this.isSetMic();
      boolean that_present_mic = true && that.isSetMic();
      if (this_present_mic || that_present_mic) {
        if (!(this_present_mic && that_present_mic))
          return false;
        if (!this.mic.equals(that.mic))
          return false;
      }

      boolean this_present_symbol = true && this.isSetSymbol();
      boolean that_present_symbol = true && that.isSetSymbol();
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (!this.symbol.equals(that.symbol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      hashCode = hashCode * 8191 + ((isSetMic()) ? 131071 : 524287);
      if (isSetMic())
        hashCode = hashCode * 8191 + mic.hashCode();

      hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
      if (isSetSymbol())
        hashCode = hashCode * 8191 + symbol.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ratings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMic()).compareTo(other.isSetMic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mic, other.mic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ratings_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mic:");
      if (this.mic == null) {
        sb.append("null");
      } else {
        sb.append(this.mic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ratings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ratings_argsStandardScheme getScheme() {
        return new ratings_argsStandardScheme();
      }
    }

    private static class ratings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ratings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ratings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mic = iprot.readString();
                struct.setMicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.symbol = iprot.readString();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ratings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        if (struct.mic != null) {
          oprot.writeFieldBegin(MIC_FIELD_DESC);
          oprot.writeString(struct.mic);
          oprot.writeFieldEnd();
        }
        if (struct.symbol != null) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ratings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ratings_argsTupleScheme getScheme() {
        return new ratings_argsTupleScheme();
      }
    }

    private static class ratings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ratings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ratings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        if (struct.isSetMic()) {
          optionals.set(2);
        }
        if (struct.isSetSymbol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
        if (struct.isSetMic()) {
          oprot.writeString(struct.mic);
        }
        if (struct.isSetSymbol()) {
          oprot.writeString(struct.symbol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ratings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mic = iprot.readString();
          struct.setMicIsSet(true);
        }
        if (incoming.get(3)) {
          struct.symbol = iprot.readString();
          struct.setSymbolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ratings_result implements org.apache.thrift.TBase<ratings_result, ratings_result._Fields>, java.io.Serializable, Cloneable, Comparable<ratings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ratings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ratings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ratings_resultTupleSchemeFactory();

    public RatingsModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RatingsModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ratings_result.class, metaDataMap);
    }

    public ratings_result() {
    }

    public ratings_result(
      RatingsModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ratings_result(ratings_result other) {
      if (other.isSetSuccess()) {
        this.success = new RatingsModel(other.success);
      }
    }

    public ratings_result deepCopy() {
      return new ratings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RatingsModel getSuccess() {
      return this.success;
    }

    public ratings_result setSuccess(RatingsModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RatingsModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ratings_result)
        return this.equals((ratings_result)that);
      return false;
    }

    public boolean equals(ratings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ratings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ratings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ratings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ratings_resultStandardScheme getScheme() {
        return new ratings_resultStandardScheme();
      }
    }

    private static class ratings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ratings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ratings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RatingsModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ratings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ratings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ratings_resultTupleScheme getScheme() {
        return new ratings_resultTupleScheme();
      }
    }

    private static class ratings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ratings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ratings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ratings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RatingsModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class top33_args implements org.apache.thrift.TBase<top33_args, top33_args._Fields>, java.io.Serializable, Cloneable, Comparable<top33_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("top33_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new top33_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new top33_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(top33_args.class, metaDataMap);
    }

    public top33_args() {
    }

    public top33_args(
      java.lang.String device_uuid,
      java.lang.String access_token)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public top33_args(top33_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public top33_args deepCopy() {
      return new top33_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public top33_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public top33_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof top33_args)
        return this.equals((top33_args)that);
      return false;
    }

    public boolean equals(top33_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(top33_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("top33_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class top33_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public top33_argsStandardScheme getScheme() {
        return new top33_argsStandardScheme();
      }
    }

    private static class top33_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<top33_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, top33_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, top33_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class top33_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public top33_argsTupleScheme getScheme() {
        return new top33_argsTupleScheme();
      }
    }

    private static class top33_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<top33_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, top33_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, top33_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class top33_result implements org.apache.thrift.TBase<top33_result, top33_result._Fields>, java.io.Serializable, Cloneable, Comparable<top33_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("top33_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new top33_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new top33_resultTupleSchemeFactory();

    public Top33Model success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Top33Model.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(top33_result.class, metaDataMap);
    }

    public top33_result() {
    }

    public top33_result(
      Top33Model success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public top33_result(top33_result other) {
      if (other.isSetSuccess()) {
        this.success = new Top33Model(other.success);
      }
    }

    public top33_result deepCopy() {
      return new top33_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Top33Model getSuccess() {
      return this.success;
    }

    public top33_result setSuccess(Top33Model success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Top33Model)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof top33_result)
        return this.equals((top33_result)that);
      return false;
    }

    public boolean equals(top33_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(top33_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("top33_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class top33_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public top33_resultStandardScheme getScheme() {
        return new top33_resultStandardScheme();
      }
    }

    private static class top33_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<top33_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, top33_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Top33Model();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, top33_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class top33_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public top33_resultTupleScheme getScheme() {
        return new top33_resultTupleScheme();
      }
    }

    private static class top33_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<top33_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, top33_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, top33_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Top33Model();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class near_pivot_args implements org.apache.thrift.TBase<near_pivot_args, near_pivot_args._Fields>, java.io.Serializable, Cloneable, Comparable<near_pivot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("near_pivot_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new near_pivot_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new near_pivot_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(near_pivot_args.class, metaDataMap);
    }

    public near_pivot_args() {
    }

    public near_pivot_args(
      java.lang.String device_uuid,
      java.lang.String access_token)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public near_pivot_args(near_pivot_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public near_pivot_args deepCopy() {
      return new near_pivot_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public near_pivot_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public near_pivot_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof near_pivot_args)
        return this.equals((near_pivot_args)that);
      return false;
    }

    public boolean equals(near_pivot_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(near_pivot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("near_pivot_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class near_pivot_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public near_pivot_argsStandardScheme getScheme() {
        return new near_pivot_argsStandardScheme();
      }
    }

    private static class near_pivot_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<near_pivot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, near_pivot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, near_pivot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class near_pivot_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public near_pivot_argsTupleScheme getScheme() {
        return new near_pivot_argsTupleScheme();
      }
    }

    private static class near_pivot_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<near_pivot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, near_pivot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, near_pivot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class near_pivot_result implements org.apache.thrift.TBase<near_pivot_result, near_pivot_result._Fields>, java.io.Serializable, Cloneable, Comparable<near_pivot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("near_pivot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new near_pivot_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new near_pivot_resultTupleSchemeFactory();

    public StockListModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockListModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(near_pivot_result.class, metaDataMap);
    }

    public near_pivot_result() {
    }

    public near_pivot_result(
      StockListModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public near_pivot_result(near_pivot_result other) {
      if (other.isSetSuccess()) {
        this.success = new StockListModel(other.success);
      }
    }

    public near_pivot_result deepCopy() {
      return new near_pivot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StockListModel getSuccess() {
      return this.success;
    }

    public near_pivot_result setSuccess(StockListModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StockListModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof near_pivot_result)
        return this.equals((near_pivot_result)that);
      return false;
    }

    public boolean equals(near_pivot_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(near_pivot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("near_pivot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class near_pivot_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public near_pivot_resultStandardScheme getScheme() {
        return new near_pivot_resultStandardScheme();
      }
    }

    private static class near_pivot_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<near_pivot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, near_pivot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StockListModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, near_pivot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class near_pivot_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public near_pivot_resultTupleScheme getScheme() {
        return new near_pivot_resultTupleScheme();
      }
    }

    private static class near_pivot_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<near_pivot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, near_pivot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, near_pivot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StockListModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class volume_up_args implements org.apache.thrift.TBase<volume_up_args, volume_up_args._Fields>, java.io.Serializable, Cloneable, Comparable<volume_up_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("volume_up_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new volume_up_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new volume_up_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(volume_up_args.class, metaDataMap);
    }

    public volume_up_args() {
    }

    public volume_up_args(
      java.lang.String device_uuid,
      java.lang.String access_token)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public volume_up_args(volume_up_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public volume_up_args deepCopy() {
      return new volume_up_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public volume_up_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public volume_up_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof volume_up_args)
        return this.equals((volume_up_args)that);
      return false;
    }

    public boolean equals(volume_up_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(volume_up_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("volume_up_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class volume_up_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public volume_up_argsStandardScheme getScheme() {
        return new volume_up_argsStandardScheme();
      }
    }

    private static class volume_up_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<volume_up_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, volume_up_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, volume_up_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class volume_up_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public volume_up_argsTupleScheme getScheme() {
        return new volume_up_argsTupleScheme();
      }
    }

    private static class volume_up_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<volume_up_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, volume_up_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, volume_up_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class volume_up_result implements org.apache.thrift.TBase<volume_up_result, volume_up_result._Fields>, java.io.Serializable, Cloneable, Comparable<volume_up_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("volume_up_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new volume_up_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new volume_up_resultTupleSchemeFactory();

    public StockListModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockListModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(volume_up_result.class, metaDataMap);
    }

    public volume_up_result() {
    }

    public volume_up_result(
      StockListModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public volume_up_result(volume_up_result other) {
      if (other.isSetSuccess()) {
        this.success = new StockListModel(other.success);
      }
    }

    public volume_up_result deepCopy() {
      return new volume_up_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StockListModel getSuccess() {
      return this.success;
    }

    public volume_up_result setSuccess(StockListModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StockListModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof volume_up_result)
        return this.equals((volume_up_result)that);
      return false;
    }

    public boolean equals(volume_up_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(volume_up_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("volume_up_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class volume_up_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public volume_up_resultStandardScheme getScheme() {
        return new volume_up_resultStandardScheme();
      }
    }

    private static class volume_up_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<volume_up_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, volume_up_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StockListModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, volume_up_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class volume_up_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public volume_up_resultTupleScheme getScheme() {
        return new volume_up_resultTupleScheme();
      }
    }

    private static class volume_up_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<volume_up_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, volume_up_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, volume_up_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StockListModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dividend_stocks_args implements org.apache.thrift.TBase<dividend_stocks_args, dividend_stocks_args._Fields>, java.io.Serializable, Cloneable, Comparable<dividend_stocks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dividend_stocks_args");

    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dividend_stocks_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dividend_stocks_argsTupleSchemeFactory();

    public java.lang.String device_uuid; // required
    public java.lang.String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_UUID((short)1, "device_uuid"),
      ACCESS_TOKEN((short)2, "access_token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_UUID
            return DEVICE_UUID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dividend_stocks_args.class, metaDataMap);
    }

    public dividend_stocks_args() {
    }

    public dividend_stocks_args(
      java.lang.String device_uuid,
      java.lang.String access_token)
    {
      this();
      this.device_uuid = device_uuid;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dividend_stocks_args(dividend_stocks_args other) {
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public dividend_stocks_args deepCopy() {
      return new dividend_stocks_args(this);
    }

    @Override
    public void clear() {
      this.device_uuid = null;
      this.access_token = null;
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public dividend_stocks_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public dividend_stocks_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_UUID:
        return getDevice_uuid();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dividend_stocks_args)
        return this.equals((dividend_stocks_args)that);
      return false;
    }

    public boolean equals(dividend_stocks_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dividend_stocks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dividend_stocks_args(");
      boolean first = true;

      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dividend_stocks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dividend_stocks_argsStandardScheme getScheme() {
        return new dividend_stocks_argsStandardScheme();
      }
    }

    private static class dividend_stocks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dividend_stocks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dividend_stocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dividend_stocks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dividend_stocks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dividend_stocks_argsTupleScheme getScheme() {
        return new dividend_stocks_argsTupleScheme();
      }
    }

    private static class dividend_stocks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dividend_stocks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dividend_stocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDevice_uuid()) {
          optionals.set(0);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dividend_stocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dividend_stocks_result implements org.apache.thrift.TBase<dividend_stocks_result, dividend_stocks_result._Fields>, java.io.Serializable, Cloneable, Comparable<dividend_stocks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dividend_stocks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dividend_stocks_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dividend_stocks_resultTupleSchemeFactory();

    public StockListModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StockListModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dividend_stocks_result.class, metaDataMap);
    }

    public dividend_stocks_result() {
    }

    public dividend_stocks_result(
      StockListModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dividend_stocks_result(dividend_stocks_result other) {
      if (other.isSetSuccess()) {
        this.success = new StockListModel(other.success);
      }
    }

    public dividend_stocks_result deepCopy() {
      return new dividend_stocks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StockListModel getSuccess() {
      return this.success;
    }

    public dividend_stocks_result setSuccess(StockListModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StockListModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dividend_stocks_result)
        return this.equals((dividend_stocks_result)that);
      return false;
    }

    public boolean equals(dividend_stocks_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dividend_stocks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dividend_stocks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dividend_stocks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dividend_stocks_resultStandardScheme getScheme() {
        return new dividend_stocks_resultStandardScheme();
      }
    }

    private static class dividend_stocks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dividend_stocks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dividend_stocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StockListModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dividend_stocks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dividend_stocks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dividend_stocks_resultTupleScheme getScheme() {
        return new dividend_stocks_resultTupleScheme();
      }
    }

    private static class dividend_stocks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dividend_stocks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dividend_stocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dividend_stocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StockListModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registered_args implements org.apache.thrift.TBase<registered_args, registered_args._Fields>, java.io.Serializable, Cloneable, Comparable<registered_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registered_args");

    private static final org.apache.thrift.protocol.TField WON_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("won_key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_uuid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registered_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registered_argsTupleSchemeFactory();

    public java.lang.String won_key; // required
    public java.lang.String device_uuid; // required
    public java.lang.String timestamp; // required
    public java.lang.String access_token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WON_KEY((short)1, "won_key"),
      DEVICE_UUID((short)2, "device_uuid"),
      TIMESTAMP((short)3, "timestamp"),
      ACCESS_TOKEN((short)4, "access_token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WON_KEY
            return WON_KEY;
          case 2: // DEVICE_UUID
            return DEVICE_UUID;
          case 3: // TIMESTAMP
            return TIMESTAMP;
          case 4: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WON_KEY, new org.apache.thrift.meta_data.FieldMetaData("won_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_UUID, new org.apache.thrift.meta_data.FieldMetaData("device_uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registered_args.class, metaDataMap);
    }

    public registered_args() {
    }

    public registered_args(
      java.lang.String won_key,
      java.lang.String device_uuid,
      java.lang.String timestamp,
      java.lang.String access_token)
    {
      this();
      this.won_key = won_key;
      this.device_uuid = device_uuid;
      this.timestamp = timestamp;
      this.access_token = access_token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registered_args(registered_args other) {
      if (other.isSetWon_key()) {
        this.won_key = other.won_key;
      }
      if (other.isSetDevice_uuid()) {
        this.device_uuid = other.device_uuid;
      }
      if (other.isSetTimestamp()) {
        this.timestamp = other.timestamp;
      }
      if (other.isSetAccess_token()) {
        this.access_token = other.access_token;
      }
    }

    public registered_args deepCopy() {
      return new registered_args(this);
    }

    @Override
    public void clear() {
      this.won_key = null;
      this.device_uuid = null;
      this.timestamp = null;
      this.access_token = null;
    }

    public java.lang.String getWon_key() {
      return this.won_key;
    }

    public registered_args setWon_key(java.lang.String won_key) {
      this.won_key = won_key;
      return this;
    }

    public void unsetWon_key() {
      this.won_key = null;
    }

    /** Returns true if field won_key is set (has been assigned a value) and false otherwise */
    public boolean isSetWon_key() {
      return this.won_key != null;
    }

    public void setWon_keyIsSet(boolean value) {
      if (!value) {
        this.won_key = null;
      }
    }

    public java.lang.String getDevice_uuid() {
      return this.device_uuid;
    }

    public registered_args setDevice_uuid(java.lang.String device_uuid) {
      this.device_uuid = device_uuid;
      return this;
    }

    public void unsetDevice_uuid() {
      this.device_uuid = null;
    }

    /** Returns true if field device_uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_uuid() {
      return this.device_uuid != null;
    }

    public void setDevice_uuidIsSet(boolean value) {
      if (!value) {
        this.device_uuid = null;
      }
    }

    public java.lang.String getTimestamp() {
      return this.timestamp;
    }

    public registered_args setTimestamp(java.lang.String timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public java.lang.String getAccess_token() {
      return this.access_token;
    }

    public registered_args setAccess_token(java.lang.String access_token) {
      this.access_token = access_token;
      return this;
    }

    public void unsetAccess_token() {
      this.access_token = null;
    }

    /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
    public boolean isSetAccess_token() {
      return this.access_token != null;
    }

    public void setAccess_tokenIsSet(boolean value) {
      if (!value) {
        this.access_token = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case WON_KEY:
        if (value == null) {
          unsetWon_key();
        } else {
          setWon_key((java.lang.String)value);
        }
        break;

      case DEVICE_UUID:
        if (value == null) {
          unsetDevice_uuid();
        } else {
          setDevice_uuid((java.lang.String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccess_token();
        } else {
          setAccess_token((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case WON_KEY:
        return getWon_key();

      case DEVICE_UUID:
        return getDevice_uuid();

      case TIMESTAMP:
        return getTimestamp();

      case ACCESS_TOKEN:
        return getAccess_token();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case WON_KEY:
        return isSetWon_key();
      case DEVICE_UUID:
        return isSetDevice_uuid();
      case TIMESTAMP:
        return isSetTimestamp();
      case ACCESS_TOKEN:
        return isSetAccess_token();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registered_args)
        return this.equals((registered_args)that);
      return false;
    }

    public boolean equals(registered_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_won_key = true && this.isSetWon_key();
      boolean that_present_won_key = true && that.isSetWon_key();
      if (this_present_won_key || that_present_won_key) {
        if (!(this_present_won_key && that_present_won_key))
          return false;
        if (!this.won_key.equals(that.won_key))
          return false;
      }

      boolean this_present_device_uuid = true && this.isSetDevice_uuid();
      boolean that_present_device_uuid = true && that.isSetDevice_uuid();
      if (this_present_device_uuid || that_present_device_uuid) {
        if (!(this_present_device_uuid && that_present_device_uuid))
          return false;
        if (!this.device_uuid.equals(that.device_uuid))
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_access_token = true && this.isSetAccess_token();
      boolean that_present_access_token = true && that.isSetAccess_token();
      if (this_present_access_token || that_present_access_token) {
        if (!(this_present_access_token && that_present_access_token))
          return false;
        if (!this.access_token.equals(that.access_token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetWon_key()) ? 131071 : 524287);
      if (isSetWon_key())
        hashCode = hashCode * 8191 + won_key.hashCode();

      hashCode = hashCode * 8191 + ((isSetDevice_uuid()) ? 131071 : 524287);
      if (isSetDevice_uuid())
        hashCode = hashCode * 8191 + device_uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
      if (isSetTimestamp())
        hashCode = hashCode * 8191 + timestamp.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccess_token()) ? 131071 : 524287);
      if (isSetAccess_token())
        hashCode = hashCode * 8191 + access_token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetWon_key()).compareTo(other.isSetWon_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWon_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.won_key, other.won_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDevice_uuid()).compareTo(other.isSetDevice_uuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_uuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_uuid, other.device_uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccess_token()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registered_args(");
      boolean first = true;

      sb.append("won_key:");
      if (this.won_key == null) {
        sb.append("null");
      } else {
        sb.append(this.won_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_uuid:");
      if (this.device_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.device_uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registered_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registered_argsStandardScheme getScheme() {
        return new registered_argsStandardScheme();
      }
    }

    private static class registered_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registered_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WON_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.won_key = iprot.readString();
                struct.setWon_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_uuid = iprot.readString();
                struct.setDevice_uuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timestamp = iprot.readString();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.access_token = iprot.readString();
                struct.setAccess_tokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registered_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.won_key != null) {
          oprot.writeFieldBegin(WON_KEY_FIELD_DESC);
          oprot.writeString(struct.won_key);
          oprot.writeFieldEnd();
        }
        if (struct.device_uuid != null) {
          oprot.writeFieldBegin(DEVICE_UUID_FIELD_DESC);
          oprot.writeString(struct.device_uuid);
          oprot.writeFieldEnd();
        }
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
        if (struct.access_token != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registered_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registered_argsTupleScheme getScheme() {
        return new registered_argsTupleScheme();
      }
    }

    private static class registered_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registered_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetWon_key()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_uuid()) {
          optionals.set(1);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetAccess_token()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWon_key()) {
          oprot.writeString(struct.won_key);
        }
        if (struct.isSetDevice_uuid()) {
          oprot.writeString(struct.device_uuid);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeString(struct.timestamp);
        }
        if (struct.isSetAccess_token()) {
          oprot.writeString(struct.access_token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.won_key = iprot.readString();
          struct.setWon_keyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_uuid = iprot.readString();
          struct.setDevice_uuidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timestamp = iprot.readString();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.access_token = iprot.readString();
          struct.setAccess_tokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registered_result implements org.apache.thrift.TBase<registered_result, registered_result._Fields>, java.io.Serializable, Cloneable, Comparable<registered_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registered_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registered_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registered_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registered_result.class, metaDataMap);
    }

    public registered_result() {
    }

    public registered_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registered_result(registered_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registered_result deepCopy() {
      return new registered_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public registered_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registered_result)
        return this.equals((registered_result)that);
      return false;
    }

    public boolean equals(registered_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(registered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registered_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registered_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registered_resultStandardScheme getScheme() {
        return new registered_resultStandardScheme();
      }
    }

    private static class registered_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registered_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registered_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registered_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registered_resultTupleScheme getScheme() {
        return new registered_resultTupleScheme();
      }
    }

    private static class registered_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registered_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
